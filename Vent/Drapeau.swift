//
//  Drapeau.swift
//  PaintCode
//
//  Created by Alexandre Jouandin on 2015/05/22.
//  Copyright (c) 2015 Jouand.in. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class Drapeau : NSObject {

    //// Cache

    private struct Cache {
        static var orange: UIColor = UIColor(red: 1.000, green: 0.474, blue: 0.000, alpha: 1.000)
        static var noir90: UIColor = UIColor(red: 0.167, green: 0.167, blue: 0.167, alpha: 1.000)
        static var blanc20: UIColor = UIColor(red: 0.813, green: 0.813, blue: 0.813, alpha: 1.000)
    }

    //// Colors

    public class var orange: UIColor { return Cache.orange }
    public class var noir90: UIColor { return Cache.noir90 }
    public class var blanc20: UIColor { return Cache.blanc20 }

    //// Drawing Methods

    public class func drawVentometre(#angle: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()
        
        //// Ensemble
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 201.5, 217)
        CGContextRotateCTM(context, -angle * CGFloat(M_PI) / 180)
        
        
        
        //// Support
        //// cable Drawing
        var cablePath = UIBezierPath()
        cablePath.moveToPoint(CGPointMake(-26.75, -31.25))
        cablePath.addLineToPoint(CGPointMake(-7.01, 3.55))
        cablePath.lineCapStyle = kCGLineCapRound;
        
        Drapeau.blanc20.setFill()
        cablePath.fill()
        Drapeau.blanc20.setStroke()
        cablePath.lineWidth = 0.5
        cablePath.stroke()
        
        
        //// cable 2 Drawing
        var cable2Path = UIBezierPath()
        cable2Path.moveToPoint(CGPointMake(6.98, 3.55))
        cable2Path.addLineToPoint(CGPointMake(24.25, -30.44))
        cable2Path.lineCapStyle = kCGLineCapRound;
        
        Drapeau.blanc20.setFill()
        cable2Path.fill()
        Drapeau.blanc20.setStroke()
        cable2Path.lineWidth = 0.5
        cable2Path.stroke()
        
        
        //// Mat Drawing
        var matPath = UIBezierPath(ovalInRect: CGRectMake(-8.5, -8, 17, 16))
        Drapeau.blanc20.setFill()
        matPath.fill()
        
        
        
        
        //// volant
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)
        
        //// Clip Clipper
        var clipperPath = UIBezierPath()
        clipperPath.moveToPoint(CGPointMake(-7.38, -177))
        clipperPath.addLineToPoint(CGPointMake(7.38, -177))
        clipperPath.addLineToPoint(CGPointMake(32, -30.5))
        clipperPath.addLineToPoint(CGPointMake(-32, -30.5))
        clipperPath.addLineToPoint(CGPointMake(-7.38, -177))
        clipperPath.closePath()
        clipperPath.addClip()
        
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(-32.5, -128, 65, 16))
        Drapeau.orange.setFill()
        rectanglePath.fill()
        
        
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRectMake(-32.5, -112, 65, 17))
        Drapeau.blanc20.setFill()
        rectangle2Path.fill()
        
        
        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRectMake(-32.5, -95, 65, 16))
        Drapeau.orange.setFill()
        rectangle3Path.fill()
        
        
        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRectMake(-32.5, -79, 65, 17))
        Drapeau.blanc20.setFill()
        rectangle4Path.fill()
        
        
        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRectMake(-32.5, -62, 65, 16))
        Drapeau.orange.setFill()
        rectangle5Path.fill()
        
        
        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRectMake(-32.5, -46, 65, 16))
        Drapeau.blanc20.setFill()
        rectangle6Path.fill()
        
        
        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRectMake(-32.5, -161, 65, 17))
        Drapeau.orange.setFill()
        rectangle7Path.fill()
        
        
        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRectMake(-32.5, -144, 65, 16))
        Drapeau.blanc20.setFill()
        rectangle8Path.fill()
        
        
        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRectMake(-32.5, -177, 65, 16))
        Drapeau.blanc20.setFill()
        rectangle9Path.fill()
        
        
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
        
        
        
        CGContextRestoreGState(context)
    }
}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
